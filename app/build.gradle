buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {

    Properties buildProps

    String MAINNET = 'mainnet'
    String TESTNET = 'testnet'

    compileSdkVersion 30
    buildToolsVersion '30.0.0'
    defaultConfig {
        applicationId "com.mybitapp"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName '1.0.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        multiDexEnabled = true

        //CONFIGURATION
        buildProps = getBuildProperties(MAINNET)
        buildConfigField 'String', 'NETWORK_NAME', buildProps['NETWORK_NAME'].toString()
        buildConfigField 'String', 'RPC_SERVER_URL', buildProps['RPC_SERVER_URL'].toString()
        buildConfigField 'String', 'BACKEND_URL', buildProps['BACKEND_URL'].toString()
        buildConfigField 'String', 'ETHERSCAN_URL', buildProps['ETHERSCAN_URL'].toString()
        buildConfigField 'String', 'MYBIT_TOKEN_ADDRESS', buildProps['MYBIT_TOKEN_ADDRESS'].toString()
        buildConfigField 'Integer', 'CHAIN_ID', buildProps['CHAIN_ID']
        buildConfigField 'Boolean', 'USE_MAIN_NET', buildProps['USE_MAIN_NET']
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/NOTICE' // will not include NOTICE file
        exclude 'META-INF/LICENSE' // will not include LICENSE file
        // as noted by @Vishnuvathsan you may also need to include
        // variations on the file name. It depends on your dependencies.
        // Some other common variations on notice and license file names
        //exclude 'META-INF/notice'
        //exclude 'META-INF/notice.txt'
        //exclude 'META-INF/license'
        //exclude 'META-INF/license.txt'
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

project.ext {
    retrofitVersion = "2.3.0"
    okhttpVersion = "3.9.0"
    supportVersion = "27.1.1"
    web3jVersion = "3.3.1-android"
    gethVersion = "1.7.3"
    bitconj = "0.14.7"
    gsonVersion = "2.8.2"
    rxJavaVersion = "2.1.6"
    rxAndroidVersion = "2.0.2"
    daggerVersion = "2.16"
    rxRelayVersion = "2.0.0"
}

dependencies {
    configurations {
        all*.exclude group: 'com.android.support', module: 'support-v13'
    }

    // Etherium client
    implementation "org.web3j:core:$project.web3jVersion"
    implementation "org.ethereum:geth:$project.gethVersion"
    implementation "org.bitcoinj:bitcoinj-core:$project.bitconj"
    // Http client
    implementation "com.squareup.retrofit2:retrofit:$project.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$project.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$project.retrofitVersion"
    implementation "com.squareup.okhttp3:okhttp:$project.okhttpVersion"
    implementation "com.google.code.gson:gson:$project.gsonVersion"

    implementation 'androidx.lifecycle:lifecycle-runtime:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "com.google.android.material:material:1.1.0"
    implementation "androidx.vectordrawable:vectordrawable:1.1.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation 'androidx.multidex:multidex:2.0.1'
    // Bar code scanning
    implementation "com.google.zxing:core:3.3.0"
    implementation 'me.dm7.barcodescanner:zxing:1.9.8'
    // Sugar
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "com.github.apl-devs:appintro:v4.2.2"
    implementation 'com.romandanylyk:pageindicatorview:1.0.0'
    implementation "com.journeyapps:zxing-android-embedded:3.2.0@aar"
    // ReactiveX
    implementation "io.reactivex.rxjava2:rxjava:$project.rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$project.rxAndroidVersion"
    implementation "com.jakewharton.rxrelay2:rxrelay:$project.rxRelayVersion"
    // Dagger 2
    // Dagger core
    implementation "com.google.dagger:dagger:$project.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$project.daggerVersion"
    // Dagger Android
    implementation "com.google.dagger:dagger-android-support:$project.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-android-processor:$project.daggerVersion"
    //ButterKnife
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'

    // if you are not using support library, include this instead
    implementation "com.google.dagger:dagger-android:$project.daggerVersion"
    // Tests
    testImplementation "junit:junit:4.12"
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: "com.android.support", module: "support-annotations"
    })
    androidTestImplementation('tools.fastlane:screengrab:1.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    // Fabric
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.4@aar') {
        transitive = true
    }
    implementation('com.crashlytics.sdk.android:answers:1.4.1@aar') {
        transitive = true
    }
}

//CONFIGURATOR
def getBuildProperties(buildType) {
    def propertiesFile = file(buildType + '.properties')
    if (propertiesFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(propertiesFile))
        return versionProps
    } else {
        copy {
            from 'mainnet.properties'
            into '.'
            rename { String fileName ->
                fileName.replace('mainnet.properties', 'testnet.properties')
            }
        }
        getBuildProperties(build)
    }
}